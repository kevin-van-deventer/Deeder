{"ast":null,"code":"var _jsxFileName = \"/home/kevin/deeder/frontend/src/pages/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { createConsumer } from \"@rails/actioncable\";\nimport { useParams } from \"react-router-dom\";\nimport \"./ChatPage.css\"; // Import styles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  var _volunteers$find;\n  const {\n    requesterId,\n    volunteerId\n  } = useParams(); // Get IDs from the URL\n  const [user, setUser] = useState(null);\n  const [volunteers, setVolunteers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  // const [messages, setMessages] = useState([]);\n  // const [newMessage, setNewMessage] = useState(\"\");\n  const token = localStorage.getItem(\"token\");\n  useEffect(() => {\n    if (token) {\n      const decodedToken = jwtDecode(token);\n      fetchUserDetails(decodedToken.user_id);\n      fetchVolunteers(decodedToken.user_id);\n    }\n  }, [token, selectedUser]);\n\n  // Fetch the logged-in user's details\n  const fetchUserDetails = async userId => {\n    try {\n      const response = await axios.get(`http://localhost:3000/users/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUser(response.data);\n    } catch (error) {\n      console.error(\"Error fetching user details:\", error);\n    }\n  };\n\n  // Fetch the volunteers for the logged-in user's deed requests\n  const fetchVolunteers = async userId => {\n    try {\n      const response = await axios.get(`http://localhost:3000/users/${userId}/volunteers`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setVolunteers(response.data);\n    } catch (error) {\n      console.error(\"Error fetching volunteers:\", error);\n    }\n  };\n\n  // Setup WebSocket for real-time chat\n  // const setupChatWebSocket = () => {\n  //   const cable = createConsumer(\"ws://localhost:3000/cable\");\n  //   cable.subscriptions.create(\n  //     { channel: \"ChatRoomChannel\", requester_id: requesterId, volunteer_id: volunteerId },\n  //     {\n  //       received: (data) => {\n  //         setMessages((prevMessages) => [...prevMessages, data.message]);\n  //       },\n  //     }\n  //   );\n  // };\n\n  // Fetch chat messages between requester and volunteer\n  // const fetchMessages = async (otherUserId) => {\n  //   try {\n  //     const response = await axios.get(`http://localhost:3000/chat_rooms/${requesterId}/${otherUserId}`, {\n  //       headers: { Authorization: `Bearer ${token}` },\n  //     });\n  //     setMessages(response.data.messages);\n  //     setSelectedUser(otherUserId);\n  //   } catch (error) {\n  //     console.error(\"Error fetching messages:\", error);\n  //   }\n  // };\n\n  // Send a new message\n  // const sendMessage = async () => {\n  //   if (!newMessage.trim()) return;\n\n  //   try {\n  //     const response = await axios.post(\n  //       `http://localhost:3000/chat_rooms/${requesterId}/${selectedUser}/messages`,\n  //       { content: newMessage },\n  //       { headers: { Authorization: `Bearer ${token}` } }\n  //     );\n\n  //     setMessages((prevMessages) => [...prevMessages, response.data]);\n  //     setNewMessage(\"\");\n  //   } catch (error) {\n  //     console.error(\"Error sending message:\", error);\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-column\",\n      children: [user && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [user.first_name, \" \", user.last_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Email: \", user.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Volunteers for Your Deeds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"volunteer-list\",\n        children: volunteers.map(volunteer => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"volunteer-item\",\n          children: [volunteer.first_name, \" \", volunteer.last_name]\n        }, volunteer.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-column\",\n      children: selectedUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Chat with \", (_volunteers$find = volunteers.find(v => v.id === selectedUser)) === null || _volunteers$find === void 0 ? void 0 : _volunteers$find.first_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type a message...\",\n            value: \"\"\n            // onChange={(e) => setNewMessage(e.target.value)}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a volunteer to start chatting.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatPage, \"hXCzv1KY71tkkXXWuVRHWFTwTZM=\", false, function () {\n  return [useParams];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","jwtDecode","createConsumer","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPage","_s","_volunteers$find","requesterId","volunteerId","user","setUser","volunteers","setVolunteers","selectedUser","setSelectedUser","token","localStorage","getItem","decodedToken","fetchUserDetails","user_id","fetchVolunteers","userId","response","get","headers","Authorization","data","error","console","className","children","first_name","last_name","fileName","_jsxFileName","lineNumber","columnNumber","email","map","volunteer","id","find","v","type","placeholder","value","_c","$RefreshReg$"],"sources":["/home/kevin/deeder/frontend/src/pages/ChatPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { createConsumer } from \"@rails/actioncable\";\nimport { useParams } from \"react-router-dom\";\nimport \"./ChatPage.css\"; // Import styles\n\nconst ChatPage = () => {\n  const { requesterId, volunteerId } = useParams(); // Get IDs from the URL\n  const [user, setUser] = useState(null);\n  const [volunteers, setVolunteers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  // const [messages, setMessages] = useState([]);\n  // const [newMessage, setNewMessage] = useState(\"\");\n  const token = localStorage.getItem(\"token\");\n\n  useEffect(() => {\n    if (token) {\n      const decodedToken = jwtDecode(token);\n      fetchUserDetails(decodedToken.user_id);\n      fetchVolunteers(decodedToken.user_id);\n    }\n  }, [token, selectedUser]);\n\n  // Fetch the logged-in user's details\n  const fetchUserDetails = async (userId) => {\n    try {\n      const response = await axios.get(`http://localhost:3000/users/${userId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setUser(response.data);\n    } catch (error) {\n      console.error(\"Error fetching user details:\", error);\n    }\n  };\n\n  // Fetch the volunteers for the logged-in user's deed requests\n  const fetchVolunteers = async (userId) => {\n    try {\n      const response = await axios.get(`http://localhost:3000/users/${userId}/volunteers`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setVolunteers(response.data);\n    } catch (error) {\n      console.error(\"Error fetching volunteers:\", error);\n    }\n  };\n\n  // Setup WebSocket for real-time chat\n  // const setupChatWebSocket = () => {\n  //   const cable = createConsumer(\"ws://localhost:3000/cable\");\n  //   cable.subscriptions.create(\n  //     { channel: \"ChatRoomChannel\", requester_id: requesterId, volunteer_id: volunteerId },\n  //     {\n  //       received: (data) => {\n  //         setMessages((prevMessages) => [...prevMessages, data.message]);\n  //       },\n  //     }\n  //   );\n  // };\n\n  // Fetch chat messages between requester and volunteer\n  // const fetchMessages = async (otherUserId) => {\n  //   try {\n  //     const response = await axios.get(`http://localhost:3000/chat_rooms/${requesterId}/${otherUserId}`, {\n  //       headers: { Authorization: `Bearer ${token}` },\n  //     });\n  //     setMessages(response.data.messages);\n  //     setSelectedUser(otherUserId);\n  //   } catch (error) {\n  //     console.error(\"Error fetching messages:\", error);\n  //   }\n  // };\n\n  // Send a new message\n  // const sendMessage = async () => {\n  //   if (!newMessage.trim()) return;\n\n  //   try {\n  //     const response = await axios.post(\n  //       `http://localhost:3000/chat_rooms/${requesterId}/${selectedUser}/messages`,\n  //       { content: newMessage },\n  //       { headers: { Authorization: `Bearer ${token}` } }\n  //     );\n\n  //     setMessages((prevMessages) => [...prevMessages, response.data]);\n  //     setNewMessage(\"\");\n  //   } catch (error) {\n  //     console.error(\"Error sending message:\", error);\n  //   }\n  // };\n\n  return (\n    <div className=\"chat-container\">\n      {/* Left Column - User Info & Volunteers */}\n      <div className=\"left-column\">\n        {user && (\n          <div className=\"user-info\">\n            <h2>{user.first_name} {user.last_name}</h2>\n            <p>Email: {user.email}</p>\n          </div>\n        )}\n        <h3>Volunteers for Your Deeds</h3>\n        <ul className=\"volunteer-list\">\n          {volunteers.map((volunteer) => (\n            <li key={volunteer.id} className=\"volunteer-item\">\n              {volunteer.first_name} {volunteer.last_name}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {/* Right Column - Chat Messages */}\n      <div className=\"right-column\">\n        {selectedUser ? (\n          <>\n            <h3>Chat with {volunteers.find((v) => v.id === selectedUser)?.first_name}</h3>\n            <div className=\"messages-container\">\n              {/* {messages.map((msg, index) => (\n                <div key={index} className={`message ${msg.sender_id === user.id ? \"sent\" : \"received\"}`}>\n                  <p>{msg.content}</p>\n                </div>\n              ))} */}\n            </div>\n            <div className=\"message-input\">\n              <input\n                type=\"text\"\n                placeholder=\"Type a message...\"\n                value=\"\"\n                // onChange={(e) => setNewMessage(e.target.value)}\n              />\n              <button>Send</button>\n            </div>\n          </>\n        ) : (\n          <p>Select a volunteer to start chatting.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}