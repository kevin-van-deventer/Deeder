{"ast":null,"code":"var _jsxFileName = \"/home/kevin/deeder/frontend/src/pages/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\n// import { createConsumer } from \"@rails/actioncable\";\nimport { useParams } from \"react-router-dom\";\nimport Navbar from \"../components/NavBar\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./ChatPage.css\"; // Import styles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  var _volunteers$find;\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [deeds, setDeeds] = useState([]);\n  const [file, setFile] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isAddingDeed, setIsAddingDeed] = useState(false);\n  const [formData, setFormData] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\"\n  });\n  const [fulfilledDeeds, setFulfilledDeeds] = useState(0);\n  const [unfulfilledDeeds, setUnfulfilledDeeds] = useState(0);\n  const [deedsFulfilledForOthers, setDeedsFulfilledForOthers] = useState(0);\n  const [volunteeredDeeds, setVolunteeredDeeds] = useState([]);\n  const [completedVolunteeredDeeds, setCompletedVolunteeredDeeds] = useState([]);\n  const [deedData, setDeedData] = useState({\n    description: \"\",\n    deed_type: \"one-time\",\n    address: \"\",\n    latitude: \"\",\n    longitude: \"\"\n  });\n  const token = localStorage.getItem(\"token\");\n  useEffect(() => {\n    if (token) {\n      const decodedToken = jwtDecode(token);\n      fetchUserDetails(decodedToken.user_id);\n      fetchDeeds(decodedToken.user_id);\n    }\n\n    // Set up ActionCable to listen for deed updates\n    const cable = createConsumer(\"ws://localhost:3000/cable\");\n    const deedsChannel = cable.subscriptions.create(\"DeedsChannel\", {\n      received: data => {\n        console.log(\"Received deed update:\", data);\n        setDeeds(data.deeds);\n      }\n    });\n    return () => {\n      deedsChannel.unsubscribe();\n    };\n  }, [token]);\n\n  // fetch user details from api\n  const fetchUserDetails = async userId => {\n    if (!userId) return;\n    try {\n      const response = await axios.get(`http://localhost:3000/users/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUser(response.data);\n      setUnfulfilledDeeds(response.data.unfulfilled_deeds);\n\n      // Fetch volunteered deeds\n      const volunteeredResponse = await axios.get(`http://localhost:3000/users/${userId}/volunteered_deeds`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const allVolunteeredDeeds = volunteeredResponse.data;\n      // Filter only deeds where the user was the one who completed them\n\n      setVolunteeredDeeds(allVolunteeredDeeds);\n    } catch (error) {\n      console.error(\"Error fetching user details:\", error);\n    }\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // upload user id document/profile picture\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n\n  // handle updating user details\n  const handleUpdate = async () => {\n    try {\n      const updateData = new FormData();\n      updateData.append(\"user[first_name]\", formData.first_name);\n      updateData.append(\"user[last_name]\", formData.last_name);\n      updateData.append(\"user[email]\", formData.email);\n      if (file) updateData.append(\"user[id_document]\", file);\n      await axios.put(`http://localhost:3000/users/${user.id}`, updateData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      setIsEditing(false);\n      fetchUserDetails(user.id);\n    } catch (error) {\n      console.error(\"Error updating user details:\", error);\n    }\n  };\n\n  // Fetch deeds requested or volunteered by the user\n  const fetchDeeds = async userId => {\n    try {\n      const response = await axios.get(`http://localhost:3000/users/${userId}/deeds`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setDeeds(response.data);\n      const volunteeredResponse = await axios.get(`http://localhost:3000/users/${userId}/volunteered_deeds`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setVolunteeredDeeds(volunteeredResponse.data);\n    } catch (error) {\n      console.error(\"Error fetching deeds:\", error);\n    }\n  };\n  const handleDeedChange = e => {\n    setDeedData({\n      ...deedData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Convert Address to Latitude & Longitude\n  const getCoordinatesFromAddress = async address => {\n    const apiKey = \"AIzaSyAx_Rbj5JBqB_QStMi27jDFWMf3HJ-aZm0\";\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\n    try {\n      const response = await axios.get(url);\n      if (response.data.results.length > 0) {\n        const location = response.data.results[0].geometry.location;\n        setDeedData(prevData => ({\n          ...prevData,\n          latitude: location.lat,\n          longitude: location.lng\n        }));\n      } else {\n        alert(\"Address not found. Please enter a valid address.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n      alert(\"Could not fetch location. Try again.\");\n    }\n  };\n\n  // Handle submitting a new deed request\n  const handleSubmitDeed = async () => {\n    const token = localStorage.getItem(\"token\");\n    const decodedToken = jwtDecode(token);\n    const userId = decodedToken.user_id;\n    if (!deedData.description || !deedData.deed_type) {\n      alert(\"Please fill all fields\");\n      return;\n    }\n\n    // Ensure latitude and longitude are set\n    if (!deedData.latitude || !deedData.longitude) {\n      alert(\"Please click 'Convert Address to Coordinates' first.\");\n      return;\n    }\n    try {\n      await axios.post(\"http://localhost:3000/deeds\", {\n        deed: {\n          description: deedData.description,\n          deed_type: deedData.deed_type,\n          latitude: deedData.latitude,\n          longitude: deedData.longitude,\n          address: deedData.address,\n          // Include address\n          requester_id: userId\n        }\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setIsAddingDeed(false);\n      fetchDeeds(user.id);\n      setTimeout(() => {\n        window.location.reload();\n      }, 100);\n    } catch (error) {\n      console.error(\"Error submitting deed request:\", error);\n      alert(\"Failed to submit deed request.\");\n    }\n  };\n  const handleDeleteDeed = async deedId => {\n    if (!window.confirm(\"Are you sure you want to delete this deed?\")) return;\n    try {\n      await axios.delete(`http://localhost:3000/users/${user.id}/deeds/${deedId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"Deed deleted successfully!\");\n      fetchDeeds(user.id);\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error deleting deed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      alert(\"Failed to delete deed.\");\n    }\n  };\n  const handleCompleteDeed = async deedId => {\n    if (!window.confirm(\"Are you sure you want to mark this deed as completed?\")) return;\n    try {\n      const response = await axios.post(`http://localhost:3000/deeds/${deedId}/complete`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(response.data.message);\n      fetchDeeds(user.id); // Refresh the deeds list\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Error completing deed:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      alert(\"Failed to mark deed as completed.\");\n    }\n  };\n  const handleConfirmCompletion = async deedId => {\n    try {\n      const response = await axios.post(`http://localhost:3000/deeds/${deedId}/confirm_complete`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(response.data.message);\n      fetchDeeds(user.id); // Refresh deeds list\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error(\"Error confirming completion:\", error);\n      alert(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || \"Failed to confirm completion.\");\n    }\n  };\n  const handleRepostDeed = async deedId => {\n    try {\n      const response = await axios.post(`http://localhost:3000/deeds/${deedId}/repost`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(response.data.message);\n      fetchDeeds(user.id); // Refresh deeds list\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error(\"Error reposting deed:\", error);\n      alert(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || \"Failed to repost deed.\");\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    setUser(null); // Update user state to trigger re-render\n    setTimeout(() => {\n      navigate(\"/login\");\n      window.location.reload(); // Ensure full reset\n    }, 100); // Delay to ensure state updates\n  };\n\n  // Setup WebSocket for real-time chat updates\n  // const setupChatWebSocket = () => {\n  //   const cable = createConsumer(\"ws://localhost:3000/cable\");\n  //   cable.subscriptions.create(\n  //     { channel: \"ChatRoomChannel\", requester_id: requesterId, volunteer_id: volunteerId },\n  //     {\n  //       received: (data) => {\n  //         setMessages((prevMessages) => [...prevMessages, data.message]);\n  //       },\n  //     }\n  //   );\n  // };\n\n  // Fetch chat messages between requester and volunteer\n  // const fetchMessages = async (otherUserId) => {\n  //   try {\n  //     const response = await axios.get(`http://localhost:3000/chat_rooms/${requesterId}/${otherUserId}`, {\n  //       headers: { Authorization: `Bearer ${token}` },\n  //     });\n  //     setMessages(response.data.messages);\n  //     setSelectedUser(otherUserId);\n  //   } catch (error) {\n  //     console.error(\"Error fetching messages:\", error);\n  //   }\n  // };\n\n  // Send a new message\n  // const sendMessage = async () => {\n  //   if (!newMessage.trim()) return;\n\n  //   try {\n  //     const response = await axios.post(\n  //       `http://localhost:3000/chat_rooms/${requesterId}/${selectedUser}/messages`,\n  //       { content: newMessage },\n  //       { headers: { Authorization: `Bearer ${token}` } }\n  //     );\n\n  //     setMessages((prevMessages) => [...prevMessages, response.data]);\n  //     setNewMessage(\"\");\n  //   } catch (error) {\n  //     console.error(\"Error sending message:\", error);\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-column\",\n        children: [user && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [user.first_name, \" \", user.last_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Email: \", user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Volunteers for Your Deeds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"volunteer-list\",\n          children: deeds.volunteers.length > 0 ? deed.volunteers.map(volunteer => /*#__PURE__*/_jsxDEV(\"li\", {\n            // onClick={() => fetchMessages(volunteer.id)}\n            className: `volunteer-item ${selectedUser === volunteer.id ? \"selected\" : \"\"}`,\n            children: [volunteer.first_name, \" \", volunteer.last_name]\n          }, volunteer.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No volunteers yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-column\",\n        children: selectedUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Chat with \", (_volunteers$find = volunteers.find(v => v.id === selectedUser)) === null || _volunteers$find === void 0 ? void 0 : _volunteers$find.first_name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-container\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Type a message...\"\n              // value={newMessage}\n              // onChange={(e) => setNewMessage(e.target.value)}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a volunteer to start chatting.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatPage, \"XSi+oE0BgPlpz4Rc+jbh09aD40k=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","jwtDecode","useParams","Navbar","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPage","_s","_volunteers$find","navigate","user","setUser","deeds","setDeeds","file","setFile","isEditing","setIsEditing","isAddingDeed","setIsAddingDeed","formData","setFormData","first_name","last_name","email","fulfilledDeeds","setFulfilledDeeds","unfulfilledDeeds","setUnfulfilledDeeds","deedsFulfilledForOthers","setDeedsFulfilledForOthers","volunteeredDeeds","setVolunteeredDeeds","completedVolunteeredDeeds","setCompletedVolunteeredDeeds","deedData","setDeedData","description","deed_type","address","latitude","longitude","token","localStorage","getItem","decodedToken","fetchUserDetails","user_id","fetchDeeds","cable","createConsumer","deedsChannel","subscriptions","create","received","data","console","log","unsubscribe","userId","response","get","headers","Authorization","unfulfilled_deeds","volunteeredResponse","allVolunteeredDeeds","error","handleChange","e","target","name","value","handleFileChange","event","files","handleUpdate","updateData","FormData","append","put","id","handleDeedChange","getCoordinatesFromAddress","apiKey","url","encodeURIComponent","results","length","location","geometry","prevData","lat","lng","alert","handleSubmitDeed","post","deed","requester_id","setTimeout","window","reload","handleDeleteDeed","deedId","confirm","delete","_error$response","message","handleCompleteDeed","_error$response2","handleConfirmCompletion","_error$response3","_error$response3$data","handleRepostDeed","_error$response4","_error$response4$data","handleLogout","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","volunteers","map","volunteer","selectedUser","find","v","type","placeholder","_c","$RefreshReg$"],"sources":["/home/kevin/deeder/frontend/src/pages/ChatPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\n// import { createConsumer } from \"@rails/actioncable\";\nimport { useParams } from \"react-router-dom\";\nimport Navbar from \"../components/NavBar\";\nimport { useNavigate } from \"react-router-dom\";\n\n\n\nimport \"./ChatPage.css\"; // Import styles\n\nconst ChatPage = () => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [deeds, setDeeds] = useState([]);\n  const [file, setFile] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isAddingDeed, setIsAddingDeed] = useState(false);\n  const [formData, setFormData] = useState({ first_name: \"\", last_name: \"\", email: \"\" });\n  const [fulfilledDeeds, setFulfilledDeeds] = useState(0);\n  const [unfulfilledDeeds, setUnfulfilledDeeds] = useState(0);\n  const [deedsFulfilledForOthers, setDeedsFulfilledForOthers] = useState(0);\n  const [volunteeredDeeds, setVolunteeredDeeds] = useState([]);\n  const [completedVolunteeredDeeds, setCompletedVolunteeredDeeds] = useState([]);\n  const [deedData, setDeedData] = useState({\n    description: \"\",\n    deed_type: \"one-time\",\n    address: \"\",\n    latitude: \"\",\n    longitude: \"\"\n  });\n\n  const token = localStorage.getItem(\"token\");\n\n  useEffect(() => {\n    if (token) {\n      const decodedToken = jwtDecode(token);\n      fetchUserDetails(decodedToken.user_id);\n      fetchDeeds(decodedToken.user_id);\n    }\n\n    // Set up ActionCable to listen for deed updates\n  const cable = createConsumer(\"ws://localhost:3000/cable\");\n\n  const deedsChannel = cable.subscriptions.create(\"DeedsChannel\", {\n    received: (data) => {\n      console.log(\"Received deed update:\", data);\n      setDeeds(data.deeds);\n    },\n  });\n\n  return () => {\n    deedsChannel.unsubscribe();\n  };\n\n}, [token]);\n\n  // fetch user details from api\n  const fetchUserDetails = async (userId) => {\n\n    if (!userId) return;\n\n    try {\n      const response = await axios.get(`http://localhost:3000/users/${userId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      setUser(response.data);\n      setUnfulfilledDeeds(response.data.unfulfilled_deeds);\n\n      // Fetch volunteered deeds\n      const volunteeredResponse = await axios.get(`http://localhost:3000/users/${userId}/volunteered_deeds`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      const allVolunteeredDeeds = volunteeredResponse.data;\n      // Filter only deeds where the user was the one who completed them\n      \n      setVolunteeredDeeds(allVolunteeredDeeds);\n      } catch (error) {\n        console.error(\"Error fetching user details:\", error);\n      }\n    };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  // upload user id document/profile picture\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  // handle updating user details\n  const handleUpdate = async () => {\n    try {\n      const updateData = new FormData();\n      updateData.append(\"user[first_name]\", formData.first_name);\n      updateData.append(\"user[last_name]\", formData.last_name);\n      updateData.append(\"user[email]\", formData.email);\n      if (file) updateData.append(\"user[id_document]\", file);\n\n      await axios.put(`http://localhost:3000/users/${user.id}`, updateData, {\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"multipart/form-data\" },\n      });\n\n      setIsEditing(false);\n      fetchUserDetails(user.id);\n    } catch (error) {\n      console.error(\"Error updating user details:\", error);\n    }\n  };\n\n  // Fetch deeds requested or volunteered by the user\n  const fetchDeeds = async (userId) => {\n    try {\n      const response = await axios.get(`http://localhost:3000/users/${userId}/deeds`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      \n      setDeeds(response.data);\n      const volunteeredResponse = await axios.get(`http://localhost:3000/users/${userId}/volunteered_deeds`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n  \n      setVolunteeredDeeds(volunteeredResponse.data);\n    } catch (error) {\n      console.error(\"Error fetching deeds:\", error);\n    }\n  };\n\n  \n  const handleDeedChange = (e) => {\n    setDeedData({ ...deedData, [e.target.name]: e.target.value });\n  };\n\n  // Convert Address to Latitude & Longitude\n  const getCoordinatesFromAddress = async (address) => {\n    const apiKey = \"AIzaSyAx_Rbj5JBqB_QStMi27jDFWMf3HJ-aZm0\";\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;\n    try {\n      const response = await axios.get(url);\n      if (response.data.results.length > 0) {\n        const location = response.data.results[0].geometry.location;\n        setDeedData ((prevData) => ({\n          ...prevData,\n          latitude: location.lat,\n          longitude: location.lng,\n        }));\n      } else {\n        alert(\"Address not found. Please enter a valid address.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n      alert(\"Could not fetch location. Try again.\");\n    }\n  };\n\n  // Handle submitting a new deed request\n  const handleSubmitDeed = async () => {\n    const token = localStorage.getItem(\"token\");\n    const decodedToken = jwtDecode(token);\n    const userId = decodedToken.user_id;\n\n    if (!deedData.description || !deedData.deed_type) {\n      alert(\"Please fill all fields\");\n      return;\n    }\n\n    // Ensure latitude and longitude are set\n    if (!deedData.latitude || !deedData.longitude) {\n      alert(\"Please click 'Convert Address to Coordinates' first.\");\n      return;\n    }\n\n    try {\n      await axios.post(\n        \"http://localhost:3000/deeds\",\n        {\n          deed: {\n            description: deedData.description,\n            deed_type: deedData.deed_type,\n            latitude: deedData.latitude,\n            longitude: deedData.longitude,\n            address: deedData.address, // Include address\n            requester_id: userId,\n          },\n        },\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n\n      setIsAddingDeed(false);\n      fetchDeeds(user.id);\n\n      setTimeout(() => {\n        window.location.reload();\n      }, 100);\n\n    } catch (error) {\n      console.error(\"Error submitting deed request:\", error);\n      alert(\"Failed to submit deed request.\");\n    }\n  };\n\n  const handleDeleteDeed = async (deedId) => {\n    if (!window.confirm(\"Are you sure you want to delete this deed?\")) return;\n  \n    try {\n      await axios.delete(`http://localhost:3000/users/${user.id}/deeds/${deedId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n  \n      alert(\"Deed deleted successfully!\");\n      fetchDeeds(user.id);\n    } catch (error) {\n      console.error(\"Error deleting deed:\", error.response?.data || error.message);\n      alert(\"Failed to delete deed.\");\n    }\n  };\n\n  const handleCompleteDeed = async (deedId) => {\n    if (!window.confirm(\"Are you sure you want to mark this deed as completed?\")) return;\n  \n    try {\n      const response = await axios.post(\n        `http://localhost:3000/deeds/${deedId}/complete`,\n        {},\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n  \n      alert(response.data.message);\n      fetchDeeds(user.id); // Refresh the deeds list\n    } catch (error) {\n      console.error(\"Error completing deed:\", error.response?.data || error.message);\n      alert(\"Failed to mark deed as completed.\");\n    }\n  };\n  \n\n  const handleConfirmCompletion = async (deedId) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:3000/deeds/${deedId}/confirm_complete`,\n        {},\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n  \n      alert(response.data.message);\n      fetchDeeds(user.id); // Refresh deeds list\n    } catch (error) {\n      console.error(\"Error confirming completion:\", error);\n      alert(error.response?.data?.error || \"Failed to confirm completion.\");\n    }\n  };\n\n  const handleRepostDeed = async (deedId) => {\n    try {\n      const response = await axios.post(`http://localhost:3000/deeds/${deedId}/repost`, {}, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      alert(response.data.message);\n      fetchDeeds(user.id); // Refresh deeds list\n    } catch (error) {\n      console.error(\"Error reposting deed:\", error);\n      alert(error.response?.data?.error || \"Failed to repost deed.\");\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    setUser(null);  // Update user state to trigger re-render\n    setTimeout(() => {\n      navigate(\"/login\");\n      window.location.reload();  // Ensure full reset\n    }, 100);  // Delay to ensure state updates\n  };\n\n  // Setup WebSocket for real-time chat updates\n  // const setupChatWebSocket = () => {\n  //   const cable = createConsumer(\"ws://localhost:3000/cable\");\n  //   cable.subscriptions.create(\n  //     { channel: \"ChatRoomChannel\", requester_id: requesterId, volunteer_id: volunteerId },\n  //     {\n  //       received: (data) => {\n  //         setMessages((prevMessages) => [...prevMessages, data.message]);\n  //       },\n  //     }\n  //   );\n  // };\n\n  // Fetch chat messages between requester and volunteer\n  // const fetchMessages = async (otherUserId) => {\n  //   try {\n  //     const response = await axios.get(`http://localhost:3000/chat_rooms/${requesterId}/${otherUserId}`, {\n  //       headers: { Authorization: `Bearer ${token}` },\n  //     });\n  //     setMessages(response.data.messages);\n  //     setSelectedUser(otherUserId);\n  //   } catch (error) {\n  //     console.error(\"Error fetching messages:\", error);\n  //   }\n  // };\n\n  // Send a new message\n  // const sendMessage = async () => {\n  //   if (!newMessage.trim()) return;\n\n  //   try {\n  //     const response = await axios.post(\n  //       `http://localhost:3000/chat_rooms/${requesterId}/${selectedUser}/messages`,\n  //       { content: newMessage },\n  //       { headers: { Authorization: `Bearer ${token}` } }\n  //     );\n\n  //     setMessages((prevMessages) => [...prevMessages, response.data]);\n  //     setNewMessage(\"\");\n  //   } catch (error) {\n  //     console.error(\"Error sending message:\", error);\n  //   }\n  // };\n\n  return (\n    <div className=\"chat-container\">\n      <Navbar />\n      <div className=\"chat-content\">\n        {/* Left Column - User Info & Volunteers */}\n        <div className=\"left-column\">\n          {user && (\n            <div className=\"user-info\">\n              <h2>{user.first_name} {user.last_name}</h2>\n              <p>Email: {user.email}</p>\n            </div>\n          )}\n          <h3>Volunteers for Your Deeds</h3>\n          <ul className=\"volunteer-list\">\n            {deeds.volunteers.length > 0 ? (\n              deed.volunteers.map((volunteer) => (\n                <li\n                  key={volunteer.id}\n                  // onClick={() => fetchMessages(volunteer.id)}\n                  className={`volunteer-item ${selectedUser === volunteer.id ? \"selected\" : \"\"}`}\n                >\n                  {volunteer.first_name} {volunteer.last_name}\n                </li>\n              ))\n            ) : (\n              <p>No volunteers yet.</p>\n            )}\n          </ul>\n        </div>\n\n        {/* Right Column - Chat Messages */}\n        <div className=\"right-column\">\n          {selectedUser ? (\n            <>\n              <h3>Chat with {volunteers.find((v) => v.id === selectedUser)?.first_name}</h3>\n              <div className=\"messages-container\">\n                {/* {messages.map((msg, index) => (\n                  <div key={index} className={`message ${msg.sender_id === user.id ? \"sent\" : \"received\"}`}>\n                    <p>{msg.content}</p>\n                  </div>\n                ))} */}\n              </div>\n              <div className=\"message-input\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Type a message...\"\n                  // value={newMessage}\n                  // onChange={(e) => setNewMessage(e.target.value)}\n                />\n                <button>Send</button>\n              </div>\n            </>\n          ) : (\n            <p>Select a volunteer to start chatting.</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}